"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/azion-proxy-client.ts":
/*!***************************************!*\
  !*** ./src/lib/azion-proxy-client.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearProxyClient: function() { return /* binding */ clearProxyClient; },\n/* harmony export */   configureProxyClient: function() { return /* binding */ configureProxyClient; },\n/* harmony export */   getProxyClient: function() { return /* binding */ getProxyClient; }\n/* harmony export */ });\nclass AzionProxyClient {\n    getHeaders() {\n        return {\n            \"Authorization\": \"Token \".concat(this.token),\n            \"Content-Type\": \"application/json\"\n        };\n    }\n    async getDatabases() {\n        try {\n            var _data_results;\n            const response = await fetch(\"/api/azion/databases\", {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                return {\n                    error: {\n                        message: errorData.error || \"HTTP \".concat(response.status)\n                    }\n                };\n            }\n            const data = await response.json();\n            // Converter formato da API para o formato esperado\n            const databases = ((_data_results = data.results) === null || _data_results === void 0 ? void 0 : _data_results.map((db)=>({\n                    id: db.id,\n                    name: db.name,\n                    clientId: db.client_id,\n                    createdAt: db.created_at,\n                    updatedAt: db.updated_at,\n                    status: db.status\n                }))) || [];\n            return {\n                data: {\n                    databases,\n                    count: data.count || 0\n                }\n            };\n        } catch (error) {\n            return {\n                error: {\n                    message: \"Erro de rede: \".concat(error)\n                }\n            };\n        }\n    }\n    async getDatabase(name) {\n        try {\n            var _data_results;\n            const response = await fetch(\"/api/azion/databases?search=\".concat(encodeURIComponent(name)), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                return {\n                    error: {\n                        message: errorData.error || \"HTTP \".concat(response.status)\n                    }\n                };\n            }\n            const data = await response.json();\n            const database = (_data_results = data.results) === null || _data_results === void 0 ? void 0 : _data_results.find((db)=>db.name === name);\n            if (!database) {\n                return {\n                    error: {\n                        message: \"Banco '\".concat(name, \"' n\\xe3o encontrado\")\n                    }\n                };\n            }\n            return {\n                data: {\n                    id: database.id,\n                    name: database.name,\n                    clientId: database.client_id,\n                    createdAt: database.created_at,\n                    updatedAt: database.updated_at,\n                    status: database.status\n                }\n            };\n        } catch (error) {\n            return {\n                error: {\n                    message: \"Erro de rede: \".concat(error)\n                }\n            };\n        }\n    }\n    async query(databaseId, statements) {\n        try {\n            const response = await fetch(\"/api/azion/databases/\".concat(databaseId, \"/query\"), {\n                method: \"POST\",\n                headers: this.getHeaders(),\n                body: JSON.stringify({\n                    statements\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                return {\n                    error: {\n                        message: errorData.error || \"HTTP \".concat(response.status)\n                    }\n                };\n            }\n            const data = await response.json();\n            return {\n                data: {\n                    toObject: ()=>{\n                        if (!data || !Array.isArray(data)) return null;\n                        return {\n                            results: data.map((result)=>{\n                                var _result_results, _result_results1;\n                                return {\n                                    rows: ((_result_results = result.results) === null || _result_results === void 0 ? void 0 : _result_results.rows) || [],\n                                    statement: (_result_results1 = result.results) === null || _result_results1 === void 0 ? void 0 : _result_results1.statement\n                                };\n                            })\n                        };\n                    }\n                }\n            };\n        } catch (error) {\n            return {\n                error: {\n                    message: \"Erro de rede: \".concat(error)\n                }\n            };\n        }\n    }\n    async execute(databaseId, statements) {\n        // Execute usa a mesma API que query na Azion\n        return this.query(databaseId, statements);\n    }\n    async getTables(databaseId) {\n        try {\n            const response = await fetch(\"/api/azion/databases/\".concat(databaseId, \"/tables\"), {\n                method: \"GET\",\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                return {\n                    error: {\n                        message: errorData.error || \"HTTP \".concat(response.status)\n                    }\n                };\n            }\n            const data = await response.json();\n            return {\n                data: {\n                    toObject: ()=>{\n                        // Se for resposta da API especÃ­fica /tables\n                        if (data && Array.isArray(data.results)) {\n                            return {\n                                results: [\n                                    {\n                                        rows: data.results.map((table)=>({\n                                                name: table.name\n                                            })),\n                                        statement: \"getTables\"\n                                    }\n                                ]\n                            };\n                        }\n                        // Se for resposta de query PRAGMA table_list\n                        if (data && Array.isArray(data)) {\n                            return {\n                                results: data.map((result)=>{\n                                    var _result_results, _result_results1;\n                                    return {\n                                        rows: ((_result_results = result.results) === null || _result_results === void 0 ? void 0 : _result_results.rows) || [],\n                                        statement: (_result_results1 = result.results) === null || _result_results1 === void 0 ? void 0 : _result_results1.statement\n                                    };\n                                })\n                            };\n                        }\n                        return null;\n                    }\n                }\n            };\n        } catch (error) {\n            return {\n                error: {\n                    message: \"Erro de rede: \".concat(error)\n                }\n            };\n        }\n    }\n    constructor(token){\n        this.token = token;\n    }\n}\nlet proxyClient = null;\nfunction configureProxyClient(token) {\n    console.log(\"Configurando cliente proxy com token:\", token.substring(0, 10) + \"...\");\n    proxyClient = new AzionProxyClient(token);\n}\nfunction getProxyClient() {\n    if (!proxyClient) {\n        console.error(\"Cliente proxy n\\xe3o configurado!\");\n        throw new Error(\"Cliente proxy n\\xe3o configurado. Chame configureProxyClient primeiro.\");\n    }\n    console.log(\"Cliente proxy obtido com sucesso\");\n    return proxyClient;\n}\nfunction clearProxyClient() {\n    proxyClient = null;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/azion-proxy-client.ts\n"));

/***/ })

});